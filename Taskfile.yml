# # yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

output: prefixed

vars:
    SERVER_STATE_STORAGE: '{{.TASKFILE_DIR}}/server-state.txt'

    STARTUP_ORDER:
        sh: cat {{.TASKFILE_DIR}}/stack-order.txt

    SHUTDOWN_ORDER:
        sh: cat {{.TASKFILE_DIR}}/stack-order.txt | tac

    PANEL_IP:
        sh: docker inspect panel | jq -r '.[0].NetworkSettings.Networks.traefik.IPAddress'

    PANEL_APP_KEY:
        sh: cat {{.TASKFILE_DIR}}/pterodactyl/.env | grep 'PTERO_API_KEY' | sed -E 's/\w+=//'

    PANEL_CLIENT_API_KEY:
        sh: cat {{.TASKFILE_DIR}}/pterodactyl/.env | grep 'PTERO_CLIENT_API_KEY' | sed -E 's/\w+=//'

    APP_HEADERS: "-H 'Accept: application/json' -H 'Authorization: Bearer {{.PANEL_APP_KEY}}'"
    CLIENT_HEADERS: "-H 'Accept: application/json' -H 'Authorization: Bearer {{.PANEL_CLIENT_API_KEY}}'"


tasks:
    all-down:
        dir: ~/docker
        cmds:
            - for:
                  var: SHUTDOWN_ORDER
              task: toggle-stack
              vars:
                  STACK: "{{.ITEM}}"
                  DIRECTION: down

    all-up:
        dir: ~/docker
        cmds:
            - for:
                  var: STARTUP_ORDER
              task: toggle-stack
              vars:
                  STACK: "{{.ITEM}}"
                  DIRECTION: up -d

    update-all:
        dir: ~/docker
        cmds:
            - for:
                  var: STARTUP_ORDER
              task: update-stack
              vars:
                  STACK: "{{.ITEM}}"

    restart:
        dir: "{{.USER_WORKING_DIR}}"
        cmd: docker compose down && docker compose up -d

    pestart:
        dir: "{{.USER_WORKING_DIR}}"
        cmd: docker compose down && docker compose pull && docker compose up -d


    toggle-stack:
        internal: true
        prefix: "{{.STACK}}"

        dir: "{{.STACK}}"
        cmds:
            - cmd: docker compose {{.DIRECTION}}
              ignore_error: true


    update-stack:
        internal: true
        prefix: "{{.STACK}}"

        dir: "{{.STACK}}"
        cmd: docker compose pull && docker compose up -d


    validate-auth:
        cmd: docker exec -it authelia authelia validate-config -c /config/configuration.yml

    generate-secret:
        cmd: docker exec -it authelia authelia crypto hash generate pbkdf2 --variant sha512 --random --random.length 72 --random.charset rfc3986

    panel-save-shutdown:
        vars:
            SERVERS_IDS:
                sh: curl -s -X GET {{.APP_HEADERS}} http://{{.PANEL_IP}}/api/application/servers | jq -r '.data[].attributes.identifier'

        preconditions:
            - echo {{.PANEL_IP}} | grep -q ^10.1.0.

        cmds:
            - echo -n > {{.SERVER_STATE_STORAGE}}
            - for:
                  var: SERVERS_IDS
              task: save-server-states
              vars:
                  SERVER_ID: "{{.ITEM}}"

    save-server-states:
        internal: true
        vars:
            STATE:
                sh: curl -s -X GET {{.CLIENT_HEADERS}} http://{{.PANEL_IP}}/api/client/servers/{{.SERVER_ID}}/resources | jq -r '.attributes.current_state'

        cmds: 
            - echo {{.SERVER_ID}}-{{if or (eq .STATE "running") (eq .STATE "starting")}}start{{else}}stop{{end}} >> {{.SERVER_STATE_STORAGE}}
            - curl -s -X POST {{.CLIENT_HEADERS}} -d 'signal=stop' http://{{.PANEL_IP}}/api/client/servers/{{.SERVER_ID}}/power

    panel-restore:
        vars:
            SERVER_STATES:
                sh: cat {{.SERVER_STATE_STORAGE}}

        preconditions:
            - echo {{.PANEL_IP}} | grep -q ^10.1.0.

        cmds:
            - for:
                  var: SERVER_STATES
              task: restore-server-states
              vars:
                  STATE: "{{.ITEM}}"
    
    restore-server-states:
        internal: true
        cmd: |
            {{$thing := splitList "-" .STATE}}
            curl -s -X POST {{.CLIENT_HEADERS}} -d 'signal={{index $thing 1}}' http://{{.PANEL_IP}}/api/client/servers/{{index $thing 0}}/power
